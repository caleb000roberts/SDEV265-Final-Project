import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk

# School supply data
supplies = {
    "Notebooks": 100,
    "Pens": 200,
    "Pencils": 300,
    "Erasers": 400,
}

# Dictionary to track ordered quantities
ordered_supplies = {}

# Declare logged_in_user as a global variable
logged_in_user = ""

def display_inventory():
    message = "Current Inventory:\n\n"
    for item, qty in supplies.items():
        message += f"{item}: {qty}\n"
    messagebox.showinfo("Inventory", message)

def order_window():
    order_root = tk.Toplevel()
    order_root.title("Order Form")
    order_root.geometry("350x400")  # Adjusted window size

    local_order_entries = {}
    for idx, item in enumerate(supplies):
        label = ttk.Label(order_root, text=item)
        label.grid(row=idx+1, column=0, padx=10, pady=5, sticky="w")
        entry = ttk.Entry(order_root)
        entry.grid(row=idx+1, column=1, padx=10, pady=5)
        local_order_entries[item] = entry

    submit_button = ttk.Button(order_root, text="Submit Order", command=lambda: submit_order(local_order_entries, submit_button, order_root))
    submit_button.grid(row=len(supplies)+1, column=0, columnspan=2, pady=10)

    # Add image to order window
    order_image = Image.open("penandpencilt.png")
    order_photo = ImageTk.PhotoImage(order_image)
    order_image_label = tk.Label(order_root, image=order_photo)
    order_image_label.image = order_photo
    order_image_label.grid(row=len(supplies)+2, columnspan=2, pady=10)

def submit_order(order_entries, submit_button, order_root):
    global ordered_supplies
    for item, entry in order_entries.items():
        qty = entry.get()
        if not qty.strip():
            messagebox.showerror("Error", f"Please enter a quantity for {item}.")
            submit_button.config(state=tk.NORMAL)
            return
        qty = int(qty)
        if qty > 0:
            if item in ordered_supplies:
                ordered_supplies[item] += qty
            else:
                ordered_supplies[item] = qty
    messagebox.showinfo("Order Submitted", "Order has been successfully submitted.")
    order_root.withdraw()

def generate_report():
    report = f"Inventory Report\n\nGenerated by: {logged_in_user}\n\n"
    report += "On-hand Inventory:\n"
    for item, qty in supplies.items():
        report += f"{item}: {qty}\n"
    report += "\nRecently Ordered Supplies:\n"
    if ordered_supplies:
        for item, qty in ordered_supplies.items():
            report += f"{item}: {qty}\n"
    else:
        report += "No supplies ordered recently.\n"
    report += "\nTotal Inventory After Orders:\n"
    for item in supplies:
        total_qty = supplies[item] + ordered_supplies.get(item, 0)
        report += f"{item}: {total_qty}\n"

    report_window = tk.Toplevel()
    report_window.title("Inventory Report")
    report_window.geometry("400x550")  # Adjusted window size

    report_text = tk.Text(report_window, width=40, height=20)
    report_text.pack(padx=10, pady=10)
    report_text.insert(tk.END, report)
    report_text.config(state=tk.DISABLED)

    # Add image to report window
    report_image = Image.open("truckt.png")
    report_photo = ImageTk.PhotoImage(report_image)
    report_image_label = tk.Label(report_window, image=report_photo)
    report_image_label.image = report_photo
    report_image_label.pack(pady=10)

def create_item():
    create_item_root = tk.Toplevel()
    create_item_root.title("Create New Item")
    create_item_root.geometry("400x200")

    item_name_label = ttk.Label(create_item_root, text="Item Name:")
    item_name_label.grid(row=0, column=0, padx=10, pady=5)
    item_name_entry = ttk.Entry(create_item_root)
    item_name_entry.grid(row=0, column=1, padx=10, pady=5)

    item_qty_label = ttk.Label(create_item_root, text="Quantity:")
    item_qty_label.grid(row=1, column=0, padx=10, pady=5)
    item_qty_entry = ttk.Entry(create_item_root)
    item_qty_entry.grid(row=1, column=1, padx=10, pady=5)

    save_button = ttk.Button(create_item_root, text="Save Item", command=lambda: save_new_item(item_name_entry, item_qty_entry, create_item_root))
    save_button.grid(row=2, column=0, columnspan=2, pady=10)

def save_new_item(item_name_entry, item_qty_entry, create_item_root):
    item_name = item_name_entry.get()
    item_qty = item_qty_entry.get()
    if not item_name.strip() or not item_qty.isdigit():
        messagebox.showerror("Error", "Invalid input. Please enter a valid name and numeric quantity.")
        return
    supplies[item_name] = int(item_qty)
    messagebox.showinfo("Item Created", f"Item '{item_name}' with quantity {item_qty} added successfully.")
    create_item_root.destroy()

def login():
    login_root = tk.Toplevel()
    login_root.title("Login")
    login_root.geometry("300x200")  # Adjusted the size for better fit

    username_label = ttk.Label(login_root, text="Username:")
    username_label.grid(row=0, column=0, padx=10, pady=10)
    username_entry = ttk.Entry(login_root)
    username_entry.grid(row=0, column=1, padx=10, pady=10)

    password_label = ttk.Label(login_root, text="Password:")
    password_label.grid(row=1, column=0, padx=10, pady=10)
    password_entry = ttk.Entry(login_root, show="*")
    password_entry.grid(row=1, column=1, padx=10, pady=10)

    login_button = ttk.Button(login_root, text="Login", command=lambda: check_login(username_entry, password_entry, login_root))
    login_button.grid(row=2, column=0, columnspan=2, pady=10)

    create_account_button = ttk.Button(login_root, text="Create Account", command=lambda: create_account(login_root))
    create_account_button.grid(row=3, column=0, columnspan=2, pady=10)

def check_login(username_entry, password_entry, login_root):
    global logged_in_user
    username = username_entry.get()
    password = password_entry.get()

    # Check if username or password fields are empty
    if not username.strip() or not password.strip():
        messagebox.showerror("Login Failed", "Please enter both username and password.")
        return

    try:
        with open("user_accounts.txt", "r") as file:
            for line in file:
                stored_username, stored_password = line.strip().split(':')
                if username == stored_username and password == stored_password:
                    logged_in_user = username
                    messagebox.showinfo("Login Successful", f"Welcome {username}!")
                    login_root.destroy()
                    root.deiconify()
                    return
        messagebox.showerror("Login Failed", "Invalid username or password.")
    except FileNotFoundError:
        messagebox.showerror("File Error", "User accounts file not found. Please check your setup or create an account.")

def create_account(login_root):
    login_root.withdraw()
    account_root = tk.Toplevel()
    account_root.title("Create Account")
    account_root.geometry("300x200")

    item_name_label = ttk.Label(account_root, text="New Username:")
    item_name_label.grid(row=0, column=0, padx=10, pady=5)
    item_name_entry = ttk.Entry(account_root)
    item_name_entry.grid(row=0, column=1, padx=10, pady=5)

    item_qty_label = ttk.Label(account_root, text="New Password:")
    item_qty_label.grid(row=1, column=0, padx=10, pady=5)
    item_qty_entry = ttk.Entry(account_root, show="*")
    item_qty_entry.grid(row=1, column=1, padx=10, pady=5)

    save_button = ttk.Button(account_root, text="Save Account", command=lambda: save_new_account(item_name_entry, item_qty_entry, account_root, login_root))
    save_button.grid(row=2, column=0, columnspan=2, pady=10)

def save_new_account(username_entry, password_entry, account_root, login_root):
    username = username_entry.get()
    password = password_entry.get()
    if not username or not password:
        messagebox.showerror("Error", "Username and password cannot be empty.")
        return
    with open("user_accounts.txt", "a") as file:
        file.write(f"{username}:{password}\n")
    messagebox.showinfo("Account Created", "Your account has been created successfully!")
    account_root.destroy()
    login_root.deiconify()

# Main application window setup
root = tk.Tk()
root.title("School Inventory System")
root.geometry("400x300")

display_button = ttk.Button(root, text="Display Inventory", command=display_inventory)
display_button.pack(pady=10)

order_button = ttk.Button(root, text="Order Supplies", command=order_window)
order_button.pack(pady=10)

report_button = ttk.Button(root, text="Generate Report", command=generate_report)
report_button.pack(pady=10)

create_item_button = ttk.Button(root, text="Create New Item", command=create_item)
create_item_button.pack(pady=10)

root.withdraw()
login()

root.mainloop()
